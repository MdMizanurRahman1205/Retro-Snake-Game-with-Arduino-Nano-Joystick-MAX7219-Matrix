/*
  üêç Retro-Snake-Game-with-Arduino-Nano-Joystick-Matrix(MAX7219)
  -------------------------------------------------------
  This project brings the classic Snake game to life using two 8x8 MAX7219 LED matrices 
  combined into a single 16x8 display. Control the snake with a joystick and enjoy a smooth, 
  blinking snake-head effect, game pause, food generation, and self-collision detection.

  üí° Designed and Developed by: MD MIZANUR RAHMAN

*/

#include <LedControl.h>

// MAX7219: DIN=11, CLK=13, CS=10, and 2 devices for 16x8 display
LedControl lc = LedControl(11, 13, 10, 2);

// Joystick pins
const int joyX = A1;
const int joyY = A0;
const int joySW = 12;
const int pauseBtn = 6;

// Snake data
const int maxLen = 256;
int snakeX[maxLen], snakeY[maxLen];
int length = 3;
int foodX = 5, foodY = 5;
int dirX = 1, dirY = 0;
bool paused = false;

void setup() {
  for (int i = 0; i < 2; i++) {
    lc.shutdown(i, false);
    lc.setIntensity(i, 8);
    lc.clearDisplay(i);
  }

  pinMode(joySW, INPUT_PULLUP);
  pinMode(pauseBtn, INPUT_PULLUP);
  randomSeed(analogRead(A2));

  waitForRestart();  // üÜï Require push button to start game
  startNewGame();
}

void loop() {
  if (digitalRead(joySW) == LOW) {
    paused = !paused;
    delay(300);  // debounce
  }

  if (paused) {
    delay(100);
    return;
  }

  readJoystick();
  moveSnake();
  if (checkSelfCollision()) {
    gameOverAnimation();
    waitForRestart();  // üÜï Wait for push button to start again
    startNewGame();
    return;
  }
  drawGame();
  delay(300);
}

// üÜï Wait until push button is pressed (pauseBtn = LOW)
void waitForRestart() {
  while (digitalRead(pauseBtn) == HIGH) {
    delay(10);
  }
  // Wait until button is released
  while (digitalRead(pauseBtn) == LOW) {
    delay(10);
  }
}

void readJoystick() {
  int xVal = analogRead(joyX);
  int yVal = analogRead(joyY);

  if (xVal < 300 && dirX != 1)       { dirX = -1; dirY = 0; }
  else if (xVal > 700 && dirX != -1) { dirX = 1; dirY = 0; }
  else if (yVal > 700 && dirY != -1) { dirX = 0; dirY = 1; }
  else if (yVal < 300 && dirY != 1)  { dirX = 0; dirY = -1; }
}

void moveSnake() {
  for (int i = length - 1; i > 0; i--) {
    snakeX[i] = snakeX[i - 1];
    snakeY[i] = snakeY[i - 1];
  }

  snakeX[0] += dirX;
  snakeY[0] += dirY;

  if (snakeX[0] > 15) snakeX[0] = 0;
  if (snakeX[0] < 0)  snakeX[0] = 15;
  if (snakeY[0] > 7)  snakeY[0] = 0;
  if (snakeY[0] < 0)  snakeY[0] = 7;

  if (snakeX[0] == foodX && snakeY[0] == foodY) {
    if (length < maxLen) length++;
    generateFood();
  }
}

void generateFood() {
  while (true) {
    foodX = random(0, 16);
    foodY = random(0, 8);
    bool onSnake = false;
    for (int i = 0; i < length; i++) {
      if (snakeX[i] == foodX && snakeY[i] == foodY) {
        onSnake = true;
        break;
      }
    }
    if (!onSnake) break;
  }
}

bool checkSelfCollision() {
  for (int i = 1; i < length; i++) {
    if (snakeX[0] == snakeX[i] && snakeY[0] == snakeY[i]) return true;
  }
  return false;
}

// üÜï Modified for 2 matrices (16x8)
void setLed16(int x, int y, bool state) {
  if (x < 0 || x > 15 || y < 0 || y > 7) return;

  int device = x < 8 ? 0 : 1;
  int col = x % 8;
  int row = 7 - y;  // Flip Y-axis for MAX7219 orientation

  lc.setLed(device, row, col, state);
}

// üÜï Modified for 2 matrices
void drawGame() {
  lc.clearDisplay(0);
  lc.clearDisplay(1);

  setLed16(foodX, foodY, true);

  for (int i = 1; i < length; i++) {
    setLed16(snakeX[i], snakeY[i], true);
  }

  setLed16(snakeX[0], snakeY[0], true);
  delay(50);
  setLed16(snakeX[0], snakeY[0], false);
  delay(30);
  setLed16(snakeX[0], snakeY[0], true);
}

// üÜï Modified for 2 matrices
void gameOverAnimation() {
  lc.clearDisplay(0);
  lc.clearDisplay(1);

  for (int i = 0; i < 3; i++) {
    setLed16(7, 3, true); setLed16(8, 3, true);
    setLed16(7, 4, true); setLed16(8, 4, true);
    delay(300);
    setLed16(7, 3, false); setLed16(8, 3, false);
    setLed16(7, 4, false); setLed16(8, 4, false);
    delay(300);
  }
}

void startNewGame() {
  length = 3;
  dirX = 1; dirY = 0;
  snakeX[0] = 7; snakeY[0] = 4;
  snakeX[1] = 6; snakeY[1] = 4;
  snakeX[2] = 5; snakeY[2] = 4;
  generateFood();
}
